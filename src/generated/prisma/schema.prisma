// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  output        = "../src/generated/prisma"
  binaryTargets = ["native", "debian-openssl-1.1.x", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  name      String   @unique
  password  String
  elo       Int      @default(1200)
  k         Int      @default(40)
  createdAt DateTime @default(now())

  matches1 Match[] @relation("player1")
  matches2 Match[] @relation("player2")
  wins     Match[] @relation("winner")
}

model Match {
  id        String   @id @default(cuid())
  player1Id String
  player2Id String
  winnerId  String
  createdAt DateTime @default(now())

  player1          User @relation("player1", fields: [player1Id], references: [id])
  player2          User @relation("player2", fields: [player2Id], references: [id])
  player1eloChange Int
  player2eloChange Int
  winner           User @relation("winner", fields: [winnerId], references: [id])
}

model UserV2 {
  id       String @id @default(cuid())
  name     String @unique
  password String

  rating     Int   @default(1500)
  rd         Float @default(350.0)
  volatility Float @default(0.06)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  matches1 MatchV2[] @relation("player1")
  matches2 MatchV2[] @relation("player2")
  wins     MatchV2[] @relation("winner")
}

model MatchV2 {
  id String @id @default(cuid())

  player1Id String
  player2Id String
  winnerId  String

  player1 UserV2 @relation("player1", fields: [player1Id], references: [id])
  player2 UserV2 @relation("player2", fields: [player2Id], references: [id])
  winner  UserV2 @relation("winner", fields: [winnerId], references: [id])

  createdAt DateTime @default(now())

  player1RatingBefore Int
  player2RatingBefore Int

  player1RatingAfter Int
  player2RatingAfter Int

  player1RdBefore Float
  player2RdBefore Float

  player1RdAfter Float
  player2RdAfter Float

  undoable Boolean @default(true)
}
